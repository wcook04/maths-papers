import bql
import pandas as pd
import numpy as np
import logging
import time

# Setup basic logging to see every step
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def run_expanded_test():
    """
    An expanded test to fetch all components for a single CIP calculation.
    """
    logging.info("--- Starting Expanded BQL Test for CIP ---")
    try:
        # 1. Connect to the BQL service and define our target
        logging.info("Connecting to BQL service...")
        bq = bql.Service()
        logging.info("✅ SUCCESS: BQL service connected.")

        # --- Configuration for our test ---
        pair_ticker = 'EURUSD Curncy'
        tenor = '3M'
        base_rate_ticker = 'ESTRON Index' # Rate for EUR (Base currency)
        term_rate_ticker = 'SOFRRATE Index'  # Rate for USD (Term currency)
        date_str = (pd.Timestamp.now() - pd.offsets.BDay(1)).strftime('%Y-%m-%d')
        
        logging.info(f"Fetching data for {pair_ticker} ({tenor}) on {date_str}...")

        # 2. Sequentially fetch each piece of data with robust checks
        
        # Fetch Spot (S)
        spot_req = bql.Request(pair_ticker, {'S': bq.data.px_last(dates=date_str, fill='prev')})
        spot_df = bq.execute(spot_req)[0].df()
        if spot_df.empty: raise ValueError(f"Spot price for {pair_ticker} returned no data.")
        S = spot_df['S'].iloc[0]
        logging.info(f"-> Fetched Spot (S): {S:.5f}")

        # Fetch Forward (F)
        fwd_univ = bq.univ.curvemembers(pair_ticker, tenors=[tenor], curve_type='FX', quote_type='outright')
        fwd_req = bql.Request(fwd_univ, {'F': bq.data.curve_rate(side='mid', dates=date_str)})
        fwd_df = bq.execute(fwd_req)[0].df()
        if fwd_df.empty: raise ValueError(f"Forward price for {pair_ticker} {tenor} returned no data.")
        F = fwd_df['F'].iloc[0]
        logging.info(f"-> Fetched {tenor} Forward (F): {F:.5f}")
        
        # Fetch Base Rate (r_base)
        base_rate_req = bql.Request(base_rate_ticker, {'r_base': bq.data.px_last(dates=date_str, fill='prev')})
        base_rate_df = bq.execute(base_rate_req)[0].df()
        if base_rate_df.empty: raise ValueError(f"Base rate for {base_rate_ticker} returned no data.")
        r_base = base_rate_df['r_base'].iloc[0] / 100
        logging.info(f"-> Fetched Base Rate (r_base): {r_base:.2%}")

        # Fetch Term Rate (r_term)
        term_rate_req = bql.Request(term_rate_ticker, {'r_term': bq.data.px_last(dates=date_str, fill='prev')})
        term_rate_df = bq.execute(term_rate_req)[0].df()
        if term_rate_df.empty: raise ValueError(f"Term rate for {term_rate_ticker} returned no data.")
        r_term = term_rate_df['r_term'].iloc[0] / 100
        logging.info(f"-> Fetched Term Rate (r_term): {r_term:.2%}")

        # 3. Perform the CIP calculation
        # The formula in log-space is: Basis = log(S) - log(F) + r_base - r_term
        # We assume continuous compounding and simple rates for this example.
        basis = (np.log(S) - np.log(F) + r_base - r_term) * 10000 # Convert to basis points

        # 4. Print a clean summary report
        print("\n" + "="*60)
        print("         ✅✅✅ CIP ANALYSIS SUCCESSFUL ✅✅✅")
        print("="*60)
        print(f"Analysis for:      {pair_ticker} ({tenor})")
        print(f"Date:              {date_str}")
        print("-"*60)
        print(f"INPUTS:")
        print(f"  Spot Price (S):      {S:10.5f}")
        print(f"  Forward Price (F):   {F:10.5f}")
        print(f"  Base Rate (EUR):     {r_base:9.3%}")
        print(f"  Term Rate (USD):     {r_term:9.3%}")
        print("-"*60)
        print("RESULT:")
        print(f"  Arbitrage Basis:   {basis:10.2f} bps")
        print("="*60)
        print("(A non-zero basis indicates a theoretical arbitrage opportunity before costs)")


    except Exception as e:
        print("\n" + "!"*60)
        print("           ❌❌❌ TEST FAILED ❌❌❌")
        print("!"*60)
        logging.critical(f"A critical error occurred: {e}", exc_info=True)
        print("\nThis likely means one of the requested tickers returned no data.")
        print("!"*60)

if __name__ == '__main__':
    run_expanded_test()
